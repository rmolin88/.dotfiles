# copy to ...plugged/vim-snippets/snippets as cpp.snip
# really easy to make a snip file just use the command :NeoSnippetEdit
# a snip file will be created in the proper directory under the current filetype
# and making snips is really easy as you see below

snippet     strcpy
options     head
    std::strcpy(${1:dst}, ${2:src});

snippet     strncpy
options     head
    std::strncpy(${1:dst}, ${2:src}, strlen($2+1);

snippet     strcat
options     head
    std::strcat(${1:dst}, ${2:src});

snippet     strcmp
    std::strcmp(${1:dst}, ${2:src}); // returns zero if they are equal

snippet     cout
options     head
    std::cout << "${1:text}" << ${2:var} << '\n';

snippet     lout
options     head
    if ((${1:file}) && ($1->is_open()))
        *$1 << "${2:text}" << ${3:var} << '\n';

snippet     try
options     head
abbr        try catch
    try 
    {
        ${2:#:TARGET}
    } 
    catch (std::exception& e) 
    {
        std::cout << CSI_RED "Exception@${1:function_name}(): " << e.what()
        << CSI_RESET << '\n';
        return -100;
    }

# range based for ( C++11 feature )
snippet     for_CPP11
options     head
abbr        for (:) {}
    for (${1:auto&& }${2:var} : ${3:container}) 
    {
        ${0:TARGET}
    }


snippet if_function
options head
abbr if RET_SUC
    if ((${1} = ${2:function_name}(${3:function_args})) != ${4:RET_SUCCESS})
    {
            ${5:std::cout} << "Failed to $2(): Error: " << $1 << '\n';
            exit($1);
    }

