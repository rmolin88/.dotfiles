#!/bin/luajit

local _options = {
  ['help'] = false,
  ['verbose'] = false,
  ['manual'] = false,
  ['daytime'] = 'base16-google',
  ['nightime'] = 'base16-gruvbox-hard',
  ['wal_light'] = false
}

local _usage = [[
  Usage: flux [OPTIONS...]

  Sets pywal colorscheme based on the time of the day reported by redshit.
  Intented to be called periodically so that when a change in day/night time is
  detected the system theme is changed automatically

    --help (-h)                 Display this message
    --verbose (-v)              Verbose output
    --manual (-m)               Use redshit manual method. By default will
                                redshift default config
    --daytime (-d)              Light theme for pywal. Default: base16-google
    --nighttime (-n)            Dark theme for pywal. Default:
                                --base16-gruvbox-hard
    --light (-l)                Use pywal -l switch for daytime, is used for
                                --themes serve
                                both for day and night time

  Ex: flux -v -m -d --base16-gruvbox-soft -l
]]

local function _check_args()
  local last_opt = nil
  for _, opt in ipairs(arg) do
    if opt == '-h' or opt == '--help' then
      print(_usage)
      return 1
    end

    if opt == '-v' or opt == '--verbose' then
      _options['verbose'] = true
    elseif opt == '-m' or opt == '--manual' then
      _options['manual'] = true
    elseif opt == '-l' or opt == '--light' then
      _options['wal_light'] = true
    elseif opt == '-d' or opt == '--daytime' then
      last_opt = 'daytime'
    elseif opt == '-n' or opt == '--nighttime' then
      last_opt = 'nighttime'
    elseif last_opt ~= nil then
      _options[last_opt] = opt
      last_opt = nil
    end

  end

  if _options['verbose'] then
    print('Switch options:')
    for key, copt in pairs(_options) do
      print('\t' .. key .. ' = ' .. tostring(copt))
    end
  end

  return 0
end

local _redshit = {
  cmd = [[/usr/bin/redshift]],
  print = '-p',
  manual_provider = '-l manual'
}

-- @brief Check if program is executable by trying to open the binary
-- May fail with specific protected files
-- @param cmd (string) Full path to command. Ex: '/usr/bin/cat'
-- @return (int) 1 if found, 0 if not
local function _executable(cmd)
  local file, err = io.open(cmd)
  if file == nil then
    print('Program not found')
    if _options['verbose'] then print('\t' .. err) end

    return 1
  end

  return 0
end

function _redshit:executable()
  return _executable(self.cmd)
end

-- @brief Executes redshift with in print mode
-- Note: Day counts from the beggining of sunrise, and night from beg sunset
-- @param manual (bool) Wether to use force manual location provider
-- @return Period (string): day, night, or '' in case of error
function _redshit:exec(manual)
  local cmd = self.cmd .. ' ' .. self.print .. ' ' ..
                  (manual and self.manual_provider or '') .. ' 2>&1&'

  if _options['verbose'] then print('Redshift command: \n\t' .. cmd) end
  local file, err = io.popen(cmd)
  if file == nil then
    print('Redshift command failed')
    if _options['verbose'] then print('\t' .. err) end

    return ''
  end
  local output = file:read('*all')
  file:close()
  if _options['verbose'] then print('Redshift output: \n' .. output) end
  -- Search occurrance of the Period value in the output
  if string.find(output, "[D-d]ay") ~= nil then return 'day' end
  if string.find(output, "[N-n]ight") ~= nil then return 'night' end
  return ''
end

local function main()
  if _check_args() ~= 0 then return 0 end

  if _redshit:executable() ~= 0 then return 1 end

  local red = _redshit:exec(_options['manual'])
  if _options['verbose'] then print('Day period: \n\t' .. red) end
  if red == '' then return 2 end

end

return main()
