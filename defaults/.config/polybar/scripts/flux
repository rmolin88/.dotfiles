#!/bin/luajit

local config = require("flux_config")

local _options = {
  ['help'] = false,
  ['verbose'] = false,
}

local _usage = [[
  Usage: flux [OPTIONS...]

  Sets pywal colorscheme based on the time of the day reported by redshit.
  Intented to be called periodically so that when a change in day/night time is
  detected the system theme is changed automatically. Please see required
  flux_config.lua file to configure the redshift and pywal commands.

    --help (-h)                 Display this message
    --verbose (-v)              Verbose output
]]

local function _check_args()
  for _, opt in ipairs(arg) do
    if opt == '-h' or opt == '--help' then
      print(_usage)
      return 1
    end

    if opt == '-v' or opt == '--verbose' then
      _options['verbose'] = true
    end

  end

  return 0
end

local _redshit = config.redshift

-- @brief Check if program is executable by trying to open the binary
-- May fail with specific protected files
-- @param cmd (string) Full path to command. Ex: '/usr/bin/cat'
-- @return (int) 1 if found, 0 if not
local function _executable(cmd)
  local file, err = io.open(cmd)
  if file == nil then
    print('Program ' .. cmd .. ' not found')
    if _options['verbose'] then print('\t' .. err) end
    return 1
  end

  return 0
end

local function _exec(cmd)
  cmd = cmd .. ' 2>&1&'
  local file, err = io.popen(cmd)
  if file == nil then
    print('Command ' .. cmd .. ' failed')
    if _options['verbose'] then print('\t' .. err) end
    return ''
  end
  local output = file:read('*all')
  file:close()
  return output
end

function _redshit:executable() return _executable(self.cmd) end

-- @brief Executes redshift with in print mode
-- Note: Day counts from the beggining of sunrise, and night from beg sunset
-- @param manual (bool) Wether to use force manual location provider
-- @return Period (string): day, night, or '' in case of error
function _redshit:exec()
  local opts = ''
  for _, opt in ipairs(self.switches) do
    opts = opts .. ' ' .. opt
  end
  local cmd = self.cmd .. opts

  if _options['verbose'] then print('Redshift command: \n\t' .. cmd) end
  local output = _exec(cmd)
  if _options['verbose'] then print('Redshift output: \n' .. output) end
  -- Search occurrance of the Period value in the output
  if string.find(output, "[D-d]ay") ~= nil then return 'day' end
  if string.find(output, "[N-n]ight") ~= nil then return 'night' end
  return ''
end

local _pywal = config.pywal

function _pywal:executable() return _executable(self.cmd) end

-- @brief Execute the pywal command
-- @param period (string): Either 'day' or 'night'
function _pywal:exec(period)
  local switches = period == 'day' and 'day' or 'night'
  local opts = ''
  for _, opt in ipairs(self[switches]) do
    opts = opts .. ' ' .. opt
  end
  local cmd = self.cmd .. opts

  if _options['verbose'] then print('Pywal command: \n\t' .. cmd) end
  local output = _exec(cmd)
  if _options['verbose'] then print('Pywal output: \n' .. output) end
end

local _memory = {location = [[/tmp/flux]]}

function _memory:store(period)
  local file = assert(io.open(self.location, "w+"))
  file:write(period)
  file:close()
end

function _memory:recall()
  local file = io.open(self.location)
  if file == nil then return '' end
  local output = file:read('*all')
  file:close()
  return output
end

local function main()
  if _check_args() ~= 0 then return 0 end

  if _redshit:executable() ~= 0 then return 1 end
  if _pywal:executable() ~= 0 then return 2 end

  local period = _redshit:exec(_options['manual'])
  if _options['verbose'] then print('Day period: \n\t' .. period) end
  if period == '' then return 3 end

  local last_period = _memory:recall()
  _memory:store(period)
  if _options['verbose'] then print('Last day period: \n\t' .. last_period) end
  if last_period == period then
    if _options['verbose'] then
      print('Time of day has not change. Nothing to do. Bye bye :D')
    end
    return
  end

  _pywal:exec(period)
end

return main()
