#!/usr/bin/env python

import sys
import argparse
import config
import parse

import requests


class PiHole():
    """
    Gets pihole data, using the 'summary' API request.
    """

    def get_status(self):
        """Returns current pihole server status"""

        self.data = self.get_raw_data('summary')

        if not self.data:
            return False

        if 'status' not in self.data:
            return False

        if self.data.get('status') == 'enabled':
            return True

        return False

    def __init__(self, cfg):
        """
        Gets pihole data, using the 'summary' API request.
        """

        self.url = ''
        self.data = dict()
        ip_add = cfg.get_opt('PiHole', 'ip', '')
        print(ip_add)
        self.webpass = cfg.get_opt('PiHole', 'webpassword', '')
        print(self.webpass)
        if not ip_add:
            return

        self.url = 'http://' + ip_add + '/admin/api.php?'
        print(self.url)

    def get_raw_data(self, query):
        """
        Returns dict with pihole data, using the 'summary' API request.
        """

        if not self.url or not query:
            return dict()

        url = self.url + query
        try:
            resp = requests.get(url)
        except Exception:
            sys.exit('Bad Host')

        try:
            data = resp.json()
        except Exception:
            sys.exit('Bad response')

        return data

    def get(self, key):
        """
        Returns key value if present at summary query

        Example `get(['ads_blocked_today'])`
        Returns negative value if failed to obtain such key
        """

        if not self.get_status():
            print('disabled')
            return []

        ret = []
        for k in key:
            if k not in self.data:
                continue
            ret += [self.data.get(k)]
        return ret

    def enable(self, really):
        """Disable/Enable pi hole if needed"""
        stat = self.get_status()
        if really and stat:
            return True

        if not really and not stat:
            return True

        if not self.webpass:
            sys.exit('Bad webpass')
            return False

        url = 'enable' if really else 'disable'
        response = self.get_raw_data(url + '&auth=' + self.webpass)
        if 'status' not in response:
            return False

        if response.get('status') != url:
            return False
        return True


def print_data(data):
    """Print list provided in `data`"""

    if not data:
        sys.exit('Bad data')

    if len(data) < 2:
        sys.exit('Not enough data')

    queries = float(data[0].replace(',', ''))
    if queries > 999:
        queries /= 1000
        str_q = str(round(queries, 1)) + 'k'
    else:
        str_q = data[0]

    blocked = float(data[1].replace(',', ''))
    if blocked > 999:
        blocked /= 1000
        str_b = str(round(blocked, 1)) + 'k'
    else:
        str_b = data[1]

    print("%s %s" % (str_q, str_b))


def main():
    """Main function."""
    # Parse arguments
    args = parse.Parser()
    args.add_description('PiHole Api Interface')
    args.parser.add_argument(
        '-c',
        type=argparse.FileType('r'),
        required=True,
        default='pihole.ini',
        help='Path to the configuration file')
    args.parser.add_argument(
        '-t',
        default=False,
        help='Toggle pihole enable')
    args.parse()
    cfg_file = args.get_arg('c', '')
    if not cfg_file:
        sys.exit('Bad config')

    # Parse config
    cfg = config.ConfigParser(cfg_file)
    hole = PiHole(cfg)
    dhole = hole.get(['dns_queries_today', 'ads_blocked_today'])
    if not dhole:
        return
    print_data(dhole)


if __name__ == '__main__':
    main()
