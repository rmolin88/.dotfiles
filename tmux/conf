# clear all bindings
# unbind-key -a
# By Daniel Thau.  Public domain.
# Maintained by Reinaldo Molina
#
# This configuration file binds many vi- and vim-like bindings to the
# appropriate tmux key bindings.  Note that for many key bindings there is no
# tmux analogue.  This is intended for tmux 1.3, which handles pane selection
# differently from the previous versions

# Thu Apr 18 2019 08:23: From here:
# https://github.com/tony/tmux-config/blob/master/.tmux.conf
# Allows for faster key repetition
# NOTE: Use this command below to truly kill tmux server. Exiting command line wont do it!!
set -s escape-time 0
# Start numbering at 1
set -g base-index 1

bind q kill-session

bind-key C command-prompt -p "Name of new window: " "new-window -n '%%'"

# split windows like vim
# vim's definition of a horizontal/vertical split is reversed from tmux's
bind s split-window -v
bind v split-window -h
bind V split-window -h -p 100

# move around panes with hjkl, as one would in vim after pressing ctrl-w
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

# resize panes like vim
# feel free to change the "1" to however many lines you want to resize by, only
# one at a time can be slow
bind < resize-pane -L 10 
bind > resize-pane -R 10
bind - resize-pane -D 10
bind + resize-pane -U 10 

# Alt mappings
bind -n M-k if "[ $(tmux display -p '#{pane_current_command}') = nvim ]" "send-keys M-k" "select-pane -U"
bind -n M-j if "[ $(tmux display -p '#{pane_current_command}') = nvim ]" "send-keys M-j" "select-pane -D"
bind -n M-h if "[ $(tmux display -p '#{pane_current_command}') = nvim ]" "send-keys M-h" "select-pane -L"
bind -n M-l if "[ $(tmux display -p '#{pane_current_command}') = nvim ]" "send-keys M-l" "select-pane -R"

# Zoom pane
bind -n M-z resize-pane -Z
# Split windows with alt
bind -n M-v split-window -h
bind -n M-s split-window -v
bind -n M-x kill-pane

# bind : to command-prompt like vim
# this is the default in tmux already
bind : command-prompt

# vi-style controls for copy mode
setw -g mode-keys vi

# Sun Jan 20 2019 13:23 
# Allow to scrool with mouse wheel
setw -g mouse on

# Nvim suggested settings for tmux
set -g default-terminal "tmux-256color"
# Your .bashrc $TERM needs to be xterm-256color
# set-option -g default-terminal "xterm-256color"
# Sun May 07 2017 15:20 - For some reason for this to work you have to do it in the terminal and then restart.
# Somethin like $tmux set-option..... 
# set-option -ga terminal-overrides ",xterm-256color:Tc"

set-option -sg escape-time 10

bind-key R respawn-window

# create a session with a throw-away window
 #new true
#
# # for future windows, stay open after the command exits
#set set-remain-on-exit on
#
# # create the windows we really want
#neww -n vim 
#splitw -v -p 20 -t 0 
#
# # for future windows, revert r-o-e to global value
#set -u set-remain-on-exit

#splitw -v -p 85 -t 0 ls
#selectw -t 1 
#selectp -t 0
# killall tmux 
# close pane x
# Reload pane
bind r source-file ~/.config/tmux/conf
unbind C-b
set -g prefix C-a
bind C-a send-prefix
# also set alias tmux='tmux -2' in .bashrc
# Z to temporarely maximize pane. its toggable
# these two options incredibly reduce the cpu processing of tmux. Really required

# Powerline
# These below are settings to turn everything off
set-option -g status off 
set-window-option -g monitor-activity off 
# These are the new settings to turn on powerline
# Too much power consumption
set-option -g status on
set-option -g status-interval 2
set-option -g status-justify "centre"
set-option -g status-left-length 60
set-option -g status-right-length 90
# set-option -g status-left "#(~/.powerline/tmux-powerline/powerline.sh left)"
# set-option -g status-right "#(~/.powerline/tmux-powerline/powerline.sh right)"

#option for continuum plugin 
# set -g @continuum-restore 'on'
set -g xterm-keys on
# Prefix then [ then you can use your normal navigation keys to scroll around (eg. Up Arrow or PgDn). Press q to quit scroll mode.

bind Left swap-window -t -1
bind Right swap-window -t +1

bind-key -n M-t new-window
bind-key -n M-1 if "[ $(tmux display -p '#{pane_current_command}') = nvim ]" "send-keys M-1" "select-window -t 1"
bind-key -n M-2 if "[ $(tmux display -p '#{pane_current_command}') = nvim ]" "send-keys M-2" "select-window -t 2"
bind-key -n M-3 if "[ $(tmux display -p '#{pane_current_command}') = nvim ]" "send-keys M-3" "select-window -t 3"
bind-key -n M-4 if "[ $(tmux display -p '#{pane_current_command}') = nvim ]" "send-keys M-4" "select-window -t 4"
bind-key -n M-5 if "[ $(tmux display -p '#{pane_current_command}') = nvim ]" "send-keys M-5" "select-window -t 5"
bind-key -n M-6 if "[ $(tmux display -p '#{pane_current_command}') = nvim ]" "send-keys M-6" "select-window -t 6"
bind-key -n M-7 if "[ $(tmux display -p '#{pane_current_command}') = nvim ]" "send-keys M-7" "select-window -t 7"
bind-key -n M-8 if "[ $(tmux display -p '#{pane_current_command}') = nvim ]" "send-keys M-8" "select-window -t 8"
bind-key -n M-[ if "[ $(tmux display -p '#{pane_current_command}') = nvim ]" "send-keys M-[" "select-window -t -1"
bind-key -n M-] if "[ $(tmux display -p '#{pane_current_command}') = nvim ]" "send-keys M-]" "select-window -t +1"

# Fixes changing cursor in terminal
set -g -a terminal-overrides ',*:Ss=\E[%p1%d q:Se=\E[2 q'

# TMUX plugins
# git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
# to install Plugin manager
# set -g @plugin 'tmux-plugins/tmux-resurrect'
# set -g @plugin 'tmux-plugins/tmux-continuum'
# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
# run '~/.tmux/plugins/tpm/tpm'
